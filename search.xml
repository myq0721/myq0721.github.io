<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mini引擎(Ayana engine)开发日志</title>
      <link href="/2023/02/07/mini%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
      <url>/2023/02/07/mini%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 游戏引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ayana引擎开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具开发</title>
      <link href="/2023/02/07/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
      <url>/2023/02/07/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.postimg.cc/ZK2xMFBN/QQ-20230207012150.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 游戏引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔与牢骚与乱七八糟的合集/发癫日记</title>
      <link href="/2023/02/05/%E9%9A%8F%E7%AC%94%E4%B8%8E%E7%89%A2%E9%AA%9A%E5%92%8C%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E5%90%88%E9%9B%86/"/>
      <url>/2023/02/05/%E9%9A%8F%E7%AC%94%E4%B8%8E%E7%89%A2%E9%AA%9A%E5%92%8C%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………….</p><p><code>warning!警告!</code></p><p><code>以下内容将毫无营养</code></p><hr><hr><hr><h2 id="以下是手机的笔记，时间线上在大一到大二"><a href="#以下是手机的笔记，时间线上在大一到大二" class="headerlink" title="以下是手机的笔记，时间线上在大一到大二"></a>以下是手机的笔记，时间线上在大一到大二</h2><p>稍微整理分类以后如下</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>小提琴有一种孤怆的美感，像“喑哑的嘶鸣”</p><p>一长声小提琴加两声清脆的钢琴，从屋檐滑落的雨滴洒在地板上溅开，和缓缓飘落的枫叶落在路上被行人踏碎的感觉</p><p>钢琴的如雨般宁静，不同吉他平静中悠闲，而有很强的归属与抚平一切的温柔，即便再奔放的表达，也有一种含蓄的优雅在。</p><hr><p>我心中的音乐是真诚而炽热感情的表达，即使是摇滚和说唱也类，也不应该是所谓高歌人的恶混沌和黑暗的东西。</p><p>我个人来说一直不是特别喜欢鼓点特别大或是节奏特别快的的音乐。但是因为beyond的爱上摇滚，因为周杰伦爱上说唱。我才发现。摇滚和说唱，在有些个别的艺术家的手中已经被曲解了。真正的摇滚和说唱是什么？</p><p>摇滚是革命，改革自我，改革命运，告别懦弱和退让，而且，不是在言语上，是在艺术里。风雨中绝不熄灭的烛火，岩洞下永远沸腾的岩浆……无人可挡，无法停止的气魄，这才是我的摇滚。</p><h3 id="发癫"><a href="#发癫" class="headerlink" title="发癫"></a>发癫</h3><p>想到未来，想到死亡，以及迄今为止废物的二十年……</p><p>魔幻又泛着恶臭油腥味儿的世界，我寥寥无几的重要的人……</p><p>对自己死亡倒是很释然，对爱着的人的离去无法抑制又无力的悲伤……</p><p>不管什么死亡赋予生命意义，可是当相处很久的人突然离去，还是会伤心……</p><p>有时候豁达到什么都无所谓，有时候又会因为很小的事情在头脑里放大……</p><h3 id="赛博朋克与美"><a href="#赛博朋克与美" class="headerlink" title="赛博朋克与美"></a>赛博朋克与美</h3><p>赛博朋克边缘行者<br>年龄大了越来越接受不了赛博朋克和黑深残这类的设定了，反而是之前略觉寡淡的日常系更对我胃口，而且越来越喜欢校园感，单纯的日常……</p><p>而且更喜欢纯粹表达的美感……</p><p>初高中是喜欢看科幻，或者是赛博风格题材的什么黑深残，阴谋论，恰好满足那个年龄寻求的感官刺激，狂妄的想象和自认的成熟。不过现在对一个大学生来说或许过于刺激了=_=</p><p>今天下午课前我提议说再走一次时常无人的小道，半开玩笑的讲，再回味一下桂花香，秋冬冷日中的余香像是因为某种不可抗力而被迫断裂的爱情，在她回头，即将离开迈出第一步之前飘扬发丝尾端的余味。恰是“孔雀东南飞，五里一徘徊”。</p><p>为什么，感觉自己越来越理想主义了</p><p>这种单纯的美感emm……</p><p>“你这都是电影里的，现在都是晚上QQ一删，翌日相遇就是路人”</p><p>这是现实。</p><p>如果被迫在影视作品中还要被迫面对现实，反正我不接受。好在这部作品结尾仍然是浪漫的，恰是因为在不允许信任的世界里，心与心的联结才更加浪漫。</p><p>这种设定之下就注定是悲剧，是末世废土中开出的白百合，或者说，是喧嚣的血液和肢节满天横飞，无尽奏响着的飞扬进行曲时，在世界的中心，是纯白的旧建筑里薰嗣的简单钢琴声与旁边单一棵翠绿的树的共鸣……</p><p>另外感觉这番好浓的EVA味，之前刚看的斩服少女也是，不愧是扳机社。另外这部作品本身一定是一部好作品，不然我也不会意难平在这里逼逼叨叨了，瞎扯一通了。</p><p>最后，</p><p>“老板！点歌！《FLY ME TO THE MOON》！”</p><h3 id="然后在这里插一个高考前的文章"><a href="#然后在这里插一个高考前的文章" class="headerlink" title="然后在这里插一个高考前的文章"></a>然后在这里插一个高考前的文章</h3><br><font size="4">《水到渠成》</font><br><br><p>我的前面是一望无际的弯曲的路</p><p>我的后面是一望无际的弯曲的路</p><p>我的两边是喘着热气的、无尽的灰土</p><p>全是裂痕，全是裂痕</p><p>浮着奇异的波纹</p><p>————我的头上是死死的太阳</p><br><p>“顶住那车！”</p><p>从远方而来，里面是我所有的一切</p><p>我所有的爱、我所有的智慧</p><p>“我不能后退！！”</p><br><p>车轮轧碎了我的前脚掌</p><p>在路上流下两条殷红的平行线</p><p>我的胳膊已经折断</p><p>我的脊骨正在变形</p><p>我大叫，喉咙里往外翻血</p><p>蚊子般的长鸣</p><p>我拼命地让身体立着</p><p>青蓝泛紫的金属机壳进入右臂，进入肺，进入心脏……</p><p>身体就染红了</p><p>是多么自然而然的事情</p><p>我有些害怕，有些犹豫</p><p>我终于选择了逃避</p><br><p>我瘫坐在灰土地上</p><p>望着那辆车</p><p>沿着蛇一样的路</p><p>慢慢地，慢慢地，走过了许多时间</p><br><p>我拖着扭曲后无用的身体</p><p>像蛇一样地爬</p><p>无可奈何，也没有办法</p><br><p>扭曲无用的身体……</p><p>水分也慢慢蒸发</p><p>到空气里，再也找不见了</p><p>我终于也成了土地</p><br><h2 id="02-x2F-05"><a href="#02-x2F-05" class="headerlink" title="02/05"></a>02/05</h2><p>什么都没有发生，无聊的一天捏，虽说是元宵节但是真无聊</p><p>晚上吃饭的中年大叔指点江山环节，各种大学的任何专业都能评判的头头是道</p><p>我一个人缩在角落玩手机就是了</p><p>等以后工作了这种亲戚饭局一定能推就推，奶奶滴</p><p>离开这河南，再也不回来了……</p><h2 id="02-x2F-07"><a href="#02-x2F-07" class="headerlink" title="02/07"></a>02/07</h2><p>其实你主要是想的太多而做的太少了</p><p>好好弄一下绩点与基本功，四大件就是了</p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学</title>
      <link href="/2023/02/05/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
      <url>/2023/02/05/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者是从游戏引擎第一次接触计算机图形学，所以更多的是偏渲染向的，特别是实时渲染。这里存一些学习路径或者学习资料，教程网站之类的东西。</p><p>图形学作为程序员三大浪漫，（另外两个是编译原理和操作系统，虽然有有人说加上网络hhh），但我觉得图形学和网络是最浪漫的cs方向<span class="github-emoji"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>好像能看到但目标又好像那么遥远，有一种爱而不得的美。</p><p>上面是开玩笑的，但是很多图形学的算法确实是很美妙~<span class="github-emoji"><span>😇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="什么是计算机图形学"><a href="#什么是计算机图形学" class="headerlink" title="什么是计算机图形学"></a><a href="http://staff.ustc.edu.cn/~lgliu/Resources/CG/What_is_CG.htm">什么是计算机图形学</a></h2><p><a href="http://staff.ustc.edu.cn/~lgliu">刘利刚</a></p><p>简单地说，计算机图形学的主要研究内容就是研究如何在计算机中表示图形、以及利用计算机进行图形的计算、处理和显示的相关原理与算法。</p><p>实际上，计算机图形学、数字图象处理和计算机视觉在很多地方的区别并不非常清晰，很多都是相通的。</p><p>笔者觉得学习一门知识，一个研究方向，就好比在沙地上挖坑。随着本方向的领域研究越发深入，其相关的知识与技能需求也会逐步的跟进并且范围会越来越大。在知识的领域，真的只集中一点往往并不能登封造极。</p><hr><h2 id="如何学习计算机图形学"><a href="#如何学习计算机图形学" class="headerlink" title="如何学习计算机图形学"></a><a href="http://staff.ustc.edu.cn/~lgliu/Resources/CG/How_to_Learn_CG&amp;Coding.htm">如何学习计算机图形学</a></h2><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>数学知识，如线性代数、三维几何学、微积分等。<br>数学在图形学中的应用，透视投影、光线追踪、景深模拟等</p><h3 id="编程语言，基础的数据结构与算法"><a href="#编程语言，基础的数据结构与算法" class="headerlink" title="编程语言，基础的数据结构与算法"></a>编程语言，基础的数据结构与算法</h3><p>编程语言，如C++、Python等。<br>编程语言的高级特性，模板、多线程、编译器优化等。</p><h3 id="图形学基础"><a href="#图形学基础" class="headerlink" title="图形学基础"></a>图形学基础</h3><p>图形学基本概念，如渲染算法、光照模型、几何学等。<br>图形学基本流程，例如对三维模型的投影、照明、深度测试等。</p><h3 id="图形学工具"><a href="#图形学工具" class="headerlink" title="图形学工具"></a>图形学工具</h3><p>熟悉常用的图形学工具，如OpenGL、DirectX等。<br>了解图形学工具的特点，支持的渲染模型、硬件加速等。</p><h3 id="图形学算法"><a href="#图形学算法" class="headerlink" title="图形学算法"></a>图形学算法</h3><p>了解常用算法，光线追踪、景深模拟、半透明合并等。<br>学会使用图形学算法解决问题，例如模拟自然环境、动态角色行为等。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>不断学习计算机图形学领域的最新技术，保持对技术的敏感和兴趣。</p><p>通过阅读技术文章、或技术会议等方式，了解最新发展方向和应用。</p><p>通过实际项目的开发积累实践经验，制作游戏等。<br>利用实践经验检验自己的技能，不断提高自己的专业水平。</p><p>与同行交流互相学习，增加对图形学的理解。<br>在团队合作的过程中，学习如何协作解决复杂的问题。</p><h2 id="资料整理"><a href="#资料整理" class="headerlink" title="资料整理"></a>资料整理</h2><ol><li>-大学图形学课程的课本是Donald Hearn的Computer Graphics第四版<br><img src="https://tudingtu.cn/i/2023/02/05/11au0iv.jpg" alt="Computer Graphics"></li></ol><p>-实时渲染那本，但是好像没有官方汉化emmm</p><p>2.<a href="http://www.kevinbeason.com/smallpt/">实现基于Path Tracing的光线追踪渲染器</a></p><p>3.软渲染</p><p><a href="http://www.3dcpptutorials.sk/index.php?id=15">3D C/C++ tutorials - Software rendering</a></p><p><a href="https://trenki2.github.io/blog/2017/06/06/developing-a-software-renderer-part1">Developing a Software Renderer Part 1</a></p><p>4.opengl(虽然很老了，但确实经典)</p><p><a href="https://learnopengl-cn.github.io/#">opengl文档</a></p><p><a href="https://www.youtube.com/@TheCherno/playlists">cherno大佬</a>&lt;–强烈推荐</p>]]></content>
      
      
      <categories>
          
          <category> 游戏引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作与考研的二三事</title>
      <link href="/2023/02/05/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E8%80%83%E7%A0%94/"/>
      <url>/2023/02/05/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E8%80%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<br><h3 id="23-x2F-02-x2F-07与父母交流结果"><a href="#23-x2F-02-x2F-07与父母交流结果" class="headerlink" title="23/02/07与父母交流结果"></a>23/02/07与父母交流结果</h3><p>以下是交流后有感发的推文转载：</p><blockquote><p>我妈妈虽然平时还蛮尊重我的，但是今晚聊到了工作和考研的话题。我能很明显的感受到我妈就是想让我考研。她那一大推话总结一下就是，<br><br>1，考研以后社会地位高。<br><br>2，工作薪资待遇更高，提拔更快。<br><br>我能感受到.在她心里面，还是刻板地觉得研究生多么稀有 ，工作与学历是正比的巴拉巴拉。1/n</p></blockquote><blockquote><p>长辈总是会用他们的年龄来论证他们的观点……要么无限重复，要么辈分压制<br><br>甚至我不好说是否因为孩子是研究生他们更方便他们回村吹牛逼……<br><br>以下均为大二的大学生的看法，可能和一些实习，工作者或研究生偶尔交流，再往上一点的信息就大部分来源网络.<br><br>对于薪资，我感觉有，但是关系并没有他们想象的那么大。IT行业还是以技术为主.2/n</p></blockquote><blockquote><p>首先我觉得，真正掌握的技术以及能直接证明能力的证书，项目等才是最有力的。<br><br>其次，工作不意味着不学习。根据咱了解的，如果进入的是比较好的团队，甚至工作以后的学习会比在学校更多更复杂，当亲手参加工程时的经验和知识，有可能更加宝贵，</p></blockquote><blockquote><p><font size="3">总结</font><br><br>综合现在我能接触到的信息，目标是尽可能收益最大化。大二的我，现在安排的事就是，学基础的四大件，对有兴趣的方向自己可以研究，（当然课内正常就好了）。除此以外可以稍微留意一些行业信息什么的</p></blockquote><blockquote><p>想法是哪里合适就去哪里，具体问题具体分析<br>我也只是想表达出，选择考研和选择工作，只是不同的选择，并没有高低贵贱之分，拿来吹牛逼大可不必~</p></blockquote><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://zhuanlan.zhihu.com/p/26767172">工作相比考研的优势</a></p><p><a href="https://zhuanlan.zhihu.com/p/100039030">相关数据</a></p><h3 id="一些图片"><a href="#一些图片" class="headerlink" title="一些图片"></a>一些图片</h3><p><img src="https://i.postimg.cc/Z5g3RTFy/v2-99e0bf3992b7353b7b63d34e56492456-r.jpg" alt="计算机类的三年工作经验薪水涨幅99%"></p><p><img src="https://i.postimg.cc/6QcXcQj8/v2-a91698bb6c62a09a22b9edbffc205c17-r.jpg" alt="互联网与软件硕本薪水涨幅约40%"></p><p>当然数据并不能说明具体的问题，一切还是得从自己的情况出发，选择适合自己的路走。</p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tuple用法总结</title>
      <link href="/2023/02/05/tuple%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/05/tuple%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="tuple简介"><a href="#tuple简介" class="headerlink" title="tuple简介"></a>tuple简介</h2><p>tuple（元组）在c++11中开始引用的。tuple看似简单，其实它是简约而不简单，可以说它是c++11中一个既简单又复杂的东西。</p><p>tuple是一个固定大小的不同类型值的集合，是泛化的std::pair。</p><p>我们也可以把他当做一个通用的结构体来用，不需要创建结构体又获取结构体的特征，在某些情况下可以取代结构体使程序更简洁，直观。</p><p>std::tuple理论上可以有无数个任意类型的成员变量，而std::pair只能是2个成员，因此在需要保存3个及以上的数据时就需要使用tuple元组了。</p><h2 id="tuple的创建和初始化"><a href="#tuple的创建和初始化" class="headerlink" title="tuple的创建和初始化"></a>tuple的创建和初始化</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">std::tuple&lt;T1, T2, TN&gt; t1;<span class="comment">//创建一个空的tuple对象,它对应的元素分别是T1和T2...Tn类型，采用值初始化。</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::tuple&lt;T1, T2, TN&gt; <span class="title">t2</span><span class="params">(v1, v2, ... TN)</span></span>;<span class="comment">//创建一个tuple对象，它的两个元素分别是T1和T2 ...Tn类型; 要获取元素的值需要通过tuple的成员get&lt;Ith&gt;(obj)进行获取(Ith是指获取在tuple中的第几个元素)。</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::tuple&lt;T1&amp;&gt; <span class="title">t3</span><span class="params">(ref&amp;)</span></span>; <span class="comment">// tuple的元素类型可以是一个引用</span></span><br><span class="line"></span><br><span class="line">std::<span class="built_in">make_tuple</span>(v1, v2); <span class="comment">// 像pair一样也可以通过make_tuple进行创建一个tuple对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple的元素类型为引用：</span></span><br><span class="line">std::string name;</span><br><span class="line"><span class="function">std::tuple&lt;string &amp;, <span class="type">int</span>&gt; <span class="title">tpRef</span><span class="params">(name, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="comment">// 对tpRef第一个元素赋值，同时name也被赋值 - 引用</span></span><br><span class="line">std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(tpRef) = <span class="string">"Sven"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// name输出也是Sven</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt; <span class="string">'\n'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="tuple的操作"><a href="#tuple的操作" class="headerlink" title="tuple的操作"></a>tuple的操作</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.等价结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">person</span> {</span><br><span class="line">    <span class="type">char</span> *m_name;</span><br><span class="line">    <span class="type">char</span> *m_addr;</span><br><span class="line">    <span class="type">int</span>  *m_ages;</span><br><span class="line">};</span><br><span class="line"><span class="comment">//可以用tuple来表示这样的一个结构类型，作用是一样的。</span></span><br><span class="line">std::tuple&lt;<span class="type">const</span> <span class="type">char</span> *, <span class="type">const</span> <span class="type">char</span> *, <span class="type">int</span>&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.获取tuple个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>{</span><br><span class="line">  <span class="function">std::tuple&lt;<span class="type">int</span>, <span class="type">char</span>, <span class="type">double</span>&gt; <span class="title">mytuple</span> <span class="params">(<span class="number">10</span>, <span class="string">'a'</span>, <span class="number">3.14</span>)</span></span>;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"mytuple has "</span>;</span><br><span class="line">  std::cout &lt;&lt; std::tuple_size&lt;<span class="keyword">decltype</span>(mytuple)&gt;::value;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">" elements."</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出结果：mytuple has 3 elements</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取元素的值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="function">std::tuple&lt;<span class="type">int</span>, <span class="type">char</span>, <span class="type">double</span>&gt; <span class="title">mytuple</span> <span class="params">(<span class="number">10</span>, <span class="string">'a'</span>, <span class="number">3.14</span>)</span></span>;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"mytuple has "</span>;</span><br><span class="line">  std::cout &lt;&lt; std::tuple_size&lt;<span class="keyword">decltype</span>(mytuple)&gt;::value;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">" elements."</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="comment">//获取元素</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"the elements is: "</span>;</span><br><span class="line">  std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(mytuple) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(mytuple) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(mytuple) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">mytuple has 3 elements.</span></span><br><span class="line"><span class="comment">the elements is: 10 a 3.14 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意：tuple不支持迭代，只能通过元素索引(或tie解包)进行获取元素的值。但是给定的索引必须是在编译器就已经给定，不能在运行期进行动态传递，否则将发生编译错误：如：</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">   std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;i&gt;(mytuple) &lt;&lt; <span class="string">" "</span>; <span class="comment">//将引发编译错误</span></span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.获取元素的类型</span></span><br><span class="line"><span class="comment">//要想得到元素类型可以通过tuple_element方法获取，如有以下元组对象：</span></span><br><span class="line"><span class="function">std::tuple&lt;std::string, <span class="type">int</span>&gt; <span class="title">tp</span><span class="params">(<span class="string">"Sven"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到第二个元素类型</span></span><br><span class="line">std::tuple_element&lt;<span class="number">1</span>, <span class="keyword">decltype</span>(tp)&gt;::type ages;  <span class="comment">// ages就为int类型</span></span><br><span class="line"> </span><br><span class="line">ages = std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(tp);</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; <span class="string">"ages: "</span> &lt;&lt; ages &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//输出结果:ages: 20</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//5.利用tie进行解包元素的值</span></span><br><span class="line"> <span class="comment">//如同pair一样也是可以通过tie进行解包tuple的各个元素的值。如下tuple对象有4个元素，通过tie解将会把这4个元素的值分别赋值给tie提供的4个变量中。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>{</span><br><span class="line">    std::tuple&lt;std::string, <span class="type">int</span>, std::string, <span class="type">int</span>&gt; tp;</span><br><span class="line">    tp = std::<span class="built_in">make_tuple</span>(<span class="string">"Sven"</span>, <span class="number">25</span>, <span class="string">"Shanghai"</span>, <span class="number">21</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 定义接收变量</span></span><br><span class="line">    std::string name;</span><br><span class="line">    std::string addr;</span><br><span class="line">    <span class="type">int</span> ages;</span><br><span class="line">    <span class="type">int</span> areaCode;</span><br><span class="line"> </span><br><span class="line">    std::<span class="built_in">tie</span>(name, ages, addr, areaCode) = tp;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Output: "</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt;<span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"addr: "</span> &lt;&lt; addr &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"ages: "</span> &lt;&lt; ages &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"areaCode: "</span> &lt;&lt; areaCode &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">Output: </span></span><br><span class="line"><span class="comment">name: Sven, addr: Shanghai, ages: 25, areaCode: 21</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>但有时候tuple包含的多个元素时只需要其中的一个或两个元素，如此可以通过std::ignore进行变量占位，这样将会忽略提取对应的元素。可以修改上述例程：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>{</span><br><span class="line">    std::tuple&lt;std::string, <span class="type">int</span>, std::string, <span class="type">int</span>&gt; tp;</span><br><span class="line">    tp = std::<span class="built_in">make_tuple</span>(<span class="string">"Sven"</span>, <span class="number">25</span>, <span class="string">"Shanghai"</span>, <span class="number">21</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 定义接收变量</span></span><br><span class="line">    std::string name;</span><br><span class="line">    std::string addr;</span><br><span class="line">    <span class="type">int</span> ages;</span><br><span class="line">    <span class="type">int</span> areaCode = <span class="number">110</span>;</span><br><span class="line"> </span><br><span class="line">    std::<span class="built_in">tie</span>(name, ages, std::ignore, std::ignore) = tp;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Output: "</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt;<span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"addr: "</span> &lt;&lt; addr &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"ages: "</span> &lt;&lt; ages &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"areaCode: "</span> &lt;&lt; areaCode &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">Output: </span></span><br><span class="line"><span class="comment">name: Sven, addr: , ages: 25, areaCode: 110</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6. tuple元素的引用</span></span><br><span class="line"><span class="comment">//前面已经列举了将引用作为tuple的元素类型。下面通过引用搭配make_tuple()可以提取tuple的元素值，将某些变量值设给它们，并通过改变这些变量来改变tuple元素的值：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **agrv)</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="function">std::tuple&lt;std::string, <span class="type">int</span>, <span class="type">float</span>&gt; <span class="title">tp1</span><span class="params">(<span class="string">"Sven Cheng"</span>, <span class="number">77</span>, <span class="number">66.1</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> tp2 = std::<span class="built_in">make_tuple</span>(std::<span class="built_in">ref</span>(name), std::<span class="built_in">ref</span>(weight), std::<span class="built_in">ref</span>(f)) = tp1;</span><br><span class="line"> </span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Before change: "</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"weight: "</span> &lt;&lt; weight &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"f: "</span> &lt;&lt; f &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"> </span><br><span class="line">    name = <span class="string">"Sven"</span>;</span><br><span class="line">    weight = <span class="number">80</span>;</span><br><span class="line">    f = <span class="number">3.14</span>;</span><br><span class="line"> </span><br><span class="line">std::cout &lt;&lt; <span class="string">"After change: "</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">"element 1st: "</span> &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(tp2) &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">"element 2nd: "</span> &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(tp2) &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">"element 3rd: "</span> &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(tp2) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">Before change: </span></span><br><span class="line"><span class="comment">name: Sven Cheng, weight: 77, f: 66.1</span></span><br><span class="line"><span class="comment">After change: </span></span><br><span class="line"><span class="comment">element 1st: Sven, element 2nd: 80, element 3rd: 3.14</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector用法总结</title>
      <link href="/2023/02/01/vector%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/01/vector%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="vector相关的用法总结"><a href="#vector相关的用法总结" class="headerlink" title="vector相关的用法总结"></a>vector相关的用法总结</h2><p>因为最近经常用，于是总结在这个地方。</p><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>1.顺序序列<br>顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。</p><p>2.动态数组<br>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。提供了在序列末尾相对快速地添加/删除元素的操作。</p><p>3.能够感知内存分配器的（Allocator-aware）<br>容器使用一个内存分配器对象来动态地处理它的存储需求。</p><hr><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>使用vector需要注意以下几点：</p><p>1.如果你要表示的向量长度较长（需要为向量内部保存很多数），容易导致内存泄漏，而且效率会很低；</p><p>2.Vector作为函数的参数或者返回值时，需要注意它的写法：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">Distance</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a, vector&lt;<span class="type">int</span>&gt;&amp;b)</span></span>; <span class="comment">//其中的“&amp;”不能少</span></span><br></pre></td></tr></tbody></table></figure><p>3.vector的元素不仅仅可以是int,double,string,还，可以是结构体，但是要注意：结构体要定义为全局的.</p><h2 id="常见使用"><a href="#常见使用" class="headerlink" title="常见使用"></a>常见使用</h2><p>使用：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vec;<span class="comment">///建立一个vector，int为数组元素的数据类型，vec为动态数组名</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">long</span> <span class="type">int</span>&gt; &gt; vec2; <span class="comment">//定义一个二维数组vec2</span></span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">2</span>);<span class="comment">//把1和2压入vector，这样vec[0]就是1,vec[1]就是2</span></span><br><span class="line">cout&lt;&lt;vec[<span class="number">0</span>]&lt;&lt;endl;<span class="comment">//使用下标访问元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用迭代器访问元素.</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)</span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">vec.<span class="built_in">insert</span>(vec.<span class="built_in">begin</span>()+i,a);<span class="comment">//插入,在第i+1个元素前面插入a</span></span><br><span class="line">vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()+<span class="number">2</span>);<span class="comment">//删除元素,删除第3个元素</span></span><br><span class="line">vec.<span class="built_in">erase</span>(vec.<span class="built_in">begin</span>()+i,vec.<span class="built_in">end</span>()+j);<span class="comment">//删除区间[i,j-1];区间从0开始</span></span><br><span class="line">vec.<span class="built_in">size</span>();<span class="comment">//向量大小</span></span><br><span class="line">vec.<span class="built_in">clear</span>();<span class="comment">//清空</span></span><br></pre></td></tr></tbody></table></figure><p>一些算法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>());<span class="comment">//将元素翻转，即逆序排列</span></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>());<span class="comment">//默认升序排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//降序排列需重写</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Comp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a,<span class="type">const</span> <span class="type">int</span> &amp;b)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),Comp)<span class="comment">//降序排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交换两个同类型向量的数据</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec2;</span><br><span class="line"><span class="built_in">swap</span>(vec,vec2);</span><br></pre></td></tr></tbody></table></figure><p>先这样，之后用到了再加叭qaq <span class="github-emoji"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>~</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语语法——4.形容词，形容动词</title>
      <link href="/2023/01/28/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%944-%E5%BD%A2%E5%AE%B9%E8%AF%8D%EF%BC%8C%E5%BD%A2%E5%AE%B9%E5%8A%A8%E8%AF%8D/"/>
      <url>/2023/01/28/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%944-%E5%BD%A2%E5%AE%B9%E8%AF%8D%EF%BC%8C%E5%BD%A2%E5%AE%B9%E5%8A%A8%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h3><p>空は青い。<br>空は青いです。//更礼貌<br>天空是蓝色的。</p><p><em>形容词可以直接做谓语后不需加だ，做终止形</em></p><p>青い空。<br>蓝色的天空。</p><p><em>形容词做定语，直接加名词，不加の，做连体形</em><br><em>名词代词等即体言</em></p><h3 id="形容动词"><a href="#形容动词" class="headerlink" title="形容动词"></a>形容动词</h3><p><em>形容动词的变化方式和动词相同</em></p><p>教室は静かだ。<br>教室は静かです。<br>教室安静。</p><p>静かな教室。<br>安静的教室</p><p><em>だ变な由终止形变连体形</em></p><h3 id="く-x2F-で"><a href="#く-x2F-で" class="headerlink" title="~く/で"></a>~く/で</h3><p><em>形容词，形容动词，与动词称为用言</em><br><em>同理，连接用眼的部分即为连用形</em></p><p>教室は大きく、静かだ。<br>教室很大也很安静。</p><p><em>形容词い变く，变连用形</em></p><p>教室は静かで、大きい。<br>教室很安静也很大。</p><p><em>形容动词以で结尾，变连用形，和名词相同</em></p><h3 id="ない"><a href="#ない" class="headerlink" title="~ない"></a>~ない</h3><p>この本は面白くない。<br>この本は面白くないです。//敬<br>この本は面白くありません。//敬<br>这本书没意思。</p><p><em>因为后要加ない这个补助形容词,面白い变面白く，即变为连用形</em></p><p>あの俳優さんは有名ではない。<br>あの俳優さんは有名ではありません。<br>那个演员没有名气。</p><h3 id="かつた-x2F"><a href="#かつた-x2F" class="headerlink" title="~かつた/"></a>~かつた/</h3><p><em>连用形的过去式</em></p><p>昨日は寒かっだ。<br>昨日は寒かっだです。<br>昨天冷。</p><p>昨日は寒くなかっだ。<br>昨日は寒くなかっだです。<br>昨日は寒くありませんでした。//でした表过去<br>昨天不冷。</p><p>寒<del>い</del><br>　く＋な<del>い</del><br>　　　　かっだ</p><p><em>为了加ない、寒い变寒く</em><br><em>然后把ない变~かっだ、即过去式的连用形</em></p><h3 id="だった"><a href="#だった" class="headerlink" title="~だった"></a>~だった</h3><p>私はもともと学生だった//だ变だった表过去<br>私はもともと学生でした。//更礼貌<br>我原本是个学生。</p><p>昨日教室は静かだった。<br>昨日教室は静かでした。<br>昨天教室安静。</p><p>昨日教室は静かではなかっだ。<br>昨日教室は静かではありませんでした。<br>昨天教室不安静。</p><h3 id="连体词"><a href="#连体词" class="headerlink" title="连体词"></a>连体词</h3><p><em>只能连接体言的词语</em></p><p>大きな<br>大的</p><p>小さな<br>小的</p><p>色んな<br>各式各样的</p><p><em>上面三个只有连体词一种词性</em></p><p>同じ<br>一样的<br><em>而同じ还是个形容动词，同じだ/です等</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语语法——3.人称代词</title>
      <link href="/2023/01/25/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%943-%E4%BA%BA%E7%A7%B0%E4%BB%A3%E8%AF%8D/"/>
      <url>/2023/01/25/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%943-%E4%BA%BA%E7%A7%B0%E4%BB%A3%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="一人称"><a href="#一人称" class="headerlink" title="一人称"></a>一人称</h3><table><thead><tr><th align="center">私（わたし）</th><th align="center">日常女性使用，正式场合男女通用</th></tr></thead><tbody><tr><td align="center">私（わたくし）</td><td align="center">男女通用，正式场合</td></tr><tr><td align="center">僕</td><td align="center">男，非正式</td></tr><tr><td align="center">俺</td><td align="center">男，粗鲁</td></tr><tr><td align="center">俺様</td><td align="center">男，居高临下，十分粗鲁</td></tr><tr><td align="center">あたし</td><td align="center">女性，随意，日常</td></tr><tr><td align="center">うち</td><td align="center">女性</td></tr></tbody></table><h3 id="二人称"><a href="#二人称" class="headerlink" title="二人称"></a>二人称</h3><h4 id="不知道对方姓名时："><a href="#不知道对方姓名时：" class="headerlink" title="不知道对方姓名时："></a>不知道对方姓名时：</h4><table><thead><tr><th align="center">あなた</th><th align="center">最常用，对平辈与晚辈使用，</th></tr></thead><tbody><tr><td align="center">君</td><td align="center">男性对同辈与晚辈使用</td></tr><tr><td align="center">お前</td><td align="center">男性对同辈与晚辈使用</td></tr><tr><td align="center">あんた</td><td align="center">比あなた更随意</td></tr><tr><td align="center">僕</td><td align="center">对不认识的小孩</td></tr></tbody></table><h4 id="知道对方姓名后，更礼貌的用语："><a href="#知道对方姓名后，更礼貌的用语：" class="headerlink" title="知道对方姓名后，更礼貌的用语："></a>知道对方姓名后，更礼貌的用语：</h4><h5 id="様-x2F-ちん-x2F-君-x2F-ちやん-x2F-殿（どの）-x2F-氏（し）"><a href="#様-x2F-ちん-x2F-君-x2F-ちやん-x2F-殿（どの）-x2F-氏（し）" class="headerlink" title="~様/~ちん/君/ちやん/殿（どの）/氏（し）"></a>~様/~ちん/君/ちやん/殿（どの）/氏（し）</h5><table><thead><tr><th align="center">佐藤様</th><th align="center">广泛，较礼貌，店家对客人等</th></tr></thead><tbody><tr><td align="center">佐藤さん</td><td align="center">日常</td></tr><tr><td align="center">佐藤君</td><td align="center">对同辈和晚辈，日常男性使用</td></tr><tr><td align="center">佐藤ちやん</td><td align="center">比较亲密</td></tr><tr><td align="center">営業部長殿</td><td align="center">前加职务，正式公文</td></tr><tr><td align="center">佐藤氏</td><td align="center">前加姓</td></tr><tr><td align="center">佐藤</td><td align="center">直呼，很亲密，或上对下，或对外人说自己人时</td></tr></tbody></table><h3 id="三人称"><a href="#三人称" class="headerlink" title="三人称"></a>三人称</h3><h4 id="人物："><a href="#人物：" class="headerlink" title="人物："></a>人物：</h4><table><thead><tr><th align="center">彼（かれ）</th><th align="center">他</th></tr></thead><tbody><tr><td align="center">彼女（かのじお）</td><td align="center">她</td></tr><tr><td align="center">こ/そ/あいつ</td><td align="center">它，家伙</td></tr></tbody></table><h4 id="物体："><a href="#物体：" class="headerlink" title="物体："></a>物体：</h4><p>こ/そ/あ/どれ       </p><hr><h3 id="复数表现"><a href="#复数表现" class="headerlink" title="复数表现"></a>复数表现</h3><table><thead><tr><th align="center">私（わたし）たち</th><th align="center">最常用，相当于“们”</th></tr></thead><tbody><tr><td align="center">あなたがだ</td><td align="center">较礼貌</td></tr><tr><td align="center">彼ら</td><td align="center">较不礼貌 <em>只有彼没有彼だち的用法</em></td></tr><tr><td align="center">私（わたくし）ども</td><td align="center">最礼貌，自谦语</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语语法——2.指示代词</title>
      <link href="/2023/01/25/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%942-%E6%8C%87%E7%A4%BA%E4%BB%A3%E8%AF%8D/"/>
      <url>/2023/01/25/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%942-%E6%8C%87%E7%A4%BA%E4%BB%A3%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="こ-指离说话人近的事物-x2F-近"><a href="#こ-指离说话人近的事物-x2F-近" class="headerlink" title="こ　指离说话人近的事物/近"></a>こ　指离说话人近的事物/近</h3><h3 id="そ-指离听话人近的事物-x2F-稍远"><a href="#そ-指离听话人近的事物-x2F-稍远" class="headerlink" title="そ　指离听话人近的事物/稍远"></a>そ　指离听话人近的事物/稍远</h3><h3 id="あ-指离双方都远的事物-x2F-很远"><a href="#あ-指离双方都远的事物-x2F-很远" class="headerlink" title="あ　指离双方都远的事物/很远"></a>あ　指离双方都远的事物/很远</h3><h3 id="ど-不定"><a href="#ど-不定" class="headerlink" title="ど　不定"></a>ど　不定</h3><hr><h3 id="れ、-の、-の"><a href="#れ、-の、-の" class="headerlink" title="~れ、~の、~の~"></a>~れ、~の、~の~</h3><p>これは本だ<br>这是书</p><p>この本は私の（本）だ<br>这本书是我的</p><h3 id="ような"><a href="#ような" class="headerlink" title="~ような"></a>~ような</h3><p>このような本//比较书面<br>这样的书</p><p>こんな本//口语化<br>这样的书</p><h3 id="こ"><a href="#こ" class="headerlink" title="~こ"></a>~こ</h3><p>ここは学校だ<br>这里是学校</p><p><em>没有あこ的用法，应是あそこ</em></p><p>教室はどこですか。//は提示后面的<br>どこが教室ですか。//が提示前面的<br>教室在哪儿？</p><h3 id="ちら-用法等于-こ-更加礼貌"><a href="#ちら-用法等于-こ-更加礼貌" class="headerlink" title="~ちら 用法等于~こ,更加礼貌"></a>~ちら 用法等于~こ,更加礼貌</h3><p>こちらは私の先生です。<br>这位是我的老师。</p><p>こちらは毛利探偵事務所でございます。<br>这里是毛利侦探事务所。</p><p><em>こちら在口语中可简化为こち</em></p><h3 id="指示代词总结"><a href="#指示代词总结" class="headerlink" title="指示代词总结"></a>指示代词总结</h3><table><thead><tr><th align="center"></th><th align="center">こ</th><th align="center">そ</th><th align="center">あ</th><th align="center">ど</th><th align="center"></th></tr></thead><tbody><tr><td align="center">~れ</td><td align="center">これ</td><td align="center">それ</td><td align="center">あれ</td><td align="center">どれ</td><td align="center">后加助词，指代事物</td></tr><tr><td align="center">~の</td><td align="center">この</td><td align="center">その</td><td align="center">あの</td><td align="center">どの</td><td align="center">后加名词，指代事物</td></tr><tr><td align="center">~ような</td><td align="center">このような</td><td align="center">そのような</td><td align="center">あのような</td><td align="center">どのような</td><td align="center">指代样态，“这样的，怎样的”</td></tr><tr><td align="center">~んな</td><td align="center">こんな</td><td align="center">そんな</td><td align="center">あんな</td><td align="center">どんな</td><td align="center">为上一行的缩略表达</td></tr><tr><td align="center">~こ</td><td align="center">ここ</td><td align="center">そこ</td><td align="center">あそこ</td><td align="center">どこ</td><td align="center">指代地点</td></tr><tr><td align="center">~ちら</td><td align="center">こちら</td><td align="center">そちら</td><td align="center">あちら</td><td align="center">どちら</td><td align="center">指代地点，郑重，还可间接指代人</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++标准模板库(STL)</title>
      <link href="/2023/01/22/C-%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93-STL/"/>
      <url>/2023/01/22/C-%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93-STL/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是C-标准模板库（STL）？"><a href="#什么是C-标准模板库（STL）？" class="headerlink" title="什么是C++标准模板库（STL）？"></a>什么是C++标准模板库（STL）？</h2><p>标准模板库 STL（Standard Template Library），是 C++ 标准库的一部分，不需要单独安装，只需要#include 头文件。</p><p>C++ 对模板（Template）支持得很好，STL 就是借助模板把常用的数据结构及其算法都实现了一遍，并且做到了数据结构和算法的分离。</p><p>C++ 语言的核心优势之一就是便于软件的复用。</p><p>C++ 语言有两个方面体现了复用：</p><p>1.面向对象的继承和多态机制<br>2.通过模板的概念实现了对泛型程序设计的支持</p><p>STL有什么优势？<br>STL封装了很多实用的容器，省时省力，能够让你将更多心思放到解决问题的步骤上，而非费力去实现数据结构诸多细节上，像极了用python时候的酣畅淋漓。<br><em>P.S. 如果对STL源码有兴趣，可读C++大师侯捷的《STL源码剖析》</em></p><h2 id="STL六大部件"><a href="#STL六大部件" class="headerlink" title="STL六大部件"></a>STL六大部件</h2><h2 id="容器（Containers）"><a href="#容器（Containers）" class="headerlink" title="容器（Containers）"></a>容器（Containers）</h2><p>[vector]<a href="https://myq0721.github.io/2023/02/05/vector-yong-fa-zong-jie/">https://myq0721.github.io/2023/02/05/vector-yong-fa-zong-jie/</a></p><h3 id="分配器（Allocators）"><a href="#分配器（Allocators）" class="headerlink" title="分配器（Allocators）"></a>分配器（Allocators）</h3><h3 id="算法（Algorithm）"><a href="#算法（Algorithm）" class="headerlink" title="算法（Algorithm）"></a>算法（Algorithm）</h3><h3 id="迭代器（Iterators）"><a href="#迭代器（Iterators）" class="headerlink" title="迭代器（Iterators）"></a>迭代器（Iterators）</h3><h3 id="适配器（Adapters）"><a href="#适配器（Adapters）" class="headerlink" title="适配器（Adapters）"></a>适配器（Adapters）</h3><h3 id="仿函数（Functors）"><a href="#仿函数（Functors）" class="headerlink" title="仿函数（Functors）"></a>仿函数（Functors）</h3><p><em>详细</em><br><em><a href="https://zhuanlan.zhihu.com/p/344558356">https://zhuanlan.zhihu.com/p/344558356</a></em></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语语法——1.名词谓语句</title>
      <link href="/2023/01/22/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%941.%E5%90%8D%E8%AF%8D%E8%B0%93%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/01/22/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%941.%E5%90%8D%E8%AF%8D%E8%B0%93%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="日语中形容词和动词可直接作谓语，而名词不行。若需用名词作谓语，则需要借助助动词来表达。"><a href="#日语中形容词和动词可直接作谓语，而名词不行。若需用名词作谓语，则需要借助助动词来表达。" class="headerlink" title="日语中形容词和动词可直接作谓语，而名词不行。若需用名词作谓语，则需要借助助动词来表达。"></a>日语中形容词和动词可直接作谓语，而名词不行。若需用名词作谓语，则需要借助助动词来表达。</h1><h3 id="だ-表达判断"><a href="#だ-表达判断" class="headerlink" title="~だ 表达判断"></a>~だ 表达判断</h3><p>学生だ<br>是学生</p><p>学生ではない<br>不是学生</p><p>学生（か）？<br>是学生吗？</p><h3 id="です-表达判断（对听话人礼貌）"><a href="#です-表达判断（对听话人礼貌）" class="headerlink" title="~です　表达判断（对听话人礼貌）"></a>~です　表达判断（对听话人礼貌）</h3><p>学生です<br>是学生</p><p>学生でわありませえ<br>不是学生</p><p>学生ですか？<br>是学生吗？</p><p>先生ですか、学生ですか。//前读降调后读声调<br>是老师还是学生</p><h3 id="である-表判断（用在演讲或论文中，非常正式）"><a href="#である-表判断（用在演讲或论文中，非常正式）" class="headerlink" title="~である　表判断（用在演讲或论文中，非常正式）"></a>~である　表判断（用在演讲或论文中，非常正式）</h3><p>学生である</p><p>学生であります</p><h3 id="でございます（敬语，店家对客人等）"><a href="#でございます（敬语，店家对客人等）" class="headerlink" title="~でございます（敬语，店家对客人等）"></a>~でございます（敬语，店家对客人等）</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center"></th><th align="center">一般</th><th align="center">礼貌</th><th align="center">正式</th><th align="center">正式+礼貌</th><th align="center">郑重</th></tr></thead><tbody><tr><td align="center">肯定</td><td align="center">だ</td><td align="center">です</td><td align="center">である</td><td align="center">であります</td><td align="center">でございます</td></tr><tr><td align="center">否定</td><td align="center">ではない</td><td align="center">ではありません</td><td align="center">/</td><td align="center">/</td><td align="center">/</td></tr></tbody></table><hr><h3 id="は-x2F-が"><a href="#は-x2F-が" class="headerlink" title="~は/が"></a>~は/が</h3><ul><li><p>你是谁？<br>我是学生。——&gt; 私は学生だ。//强调は后的部分</p></li><li><p>谁是学生？<br>我是学生。——&gt; 私が学生だ。//强调が前的部分</p></li></ul><h3 id="も"><a href="#も" class="headerlink" title="~も"></a>~も</h3><p>我是学生，他也是学生。<br>私は学生です。彼も学生です。//</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基础语法</title>
      <link href="/2023/01/20/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/01/20/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown?"></a>什么是Markdown?</h2><p>&nbsp;  Markdown就是一种文档的格式，文件名的末尾是.md，正如我们常用的word文档格式是.doc、.docx，需要对应的软件来打开这一种格式。</p><h2 id="为什么要用Markdown？"><a href="#为什么要用Markdown？" class="headerlink" title="为什么要用Markdown？"></a>为什么要用Markdown？</h2><p>作为一种新的文档格式，我们放着这么好的word文档不用却用Markdown是有一些原因的：</p><p>有人发现当他们用Word或者别的文本编辑器写好一篇文章，兴高采烈地发布到博客、论坛、网站上时，发现格式完全乱了，于是需要花费大量的时间来重新排版，处理图片、缩进、字体、加粗、标题等。三番五次之后，开始发现文章写作可能只花了半小时，重新排版就花了十多分钟。更让人不悦的是，当我们要把同一篇文章发布到另一个网页上时，这样的排版还要重新做一次。</p><p>并且习惯了非可视化界面后，使用鼠标操作意味着终断打字，是一个显著降低输入速度的行为。一般来说文章的编写必然需要设置一定的格式：标题、加粗、行距、缩进、字体……这些一般都需要用鼠标在可视化界面上选择。</p><h2 id="1-删除线："><a href="#1-删除线：" class="headerlink" title="1.删除线："></a>1.删除线：</h2><p>用法：<code>~~要划删除线的文字~~</code></p><p>例如：<code>~~HelloWorld~~</code></p><p>显示：<del>HelloWorld</del></p><h2 id="2-下划线："><a href="#2-下划线：" class="headerlink" title="2.下划线："></a>2.下划线：</h2><p>用法：<code>&lt;u&gt;要添加下划线的文字&lt;/u&gt;</code></p><p>例如：<code>&lt;u&gt;HelloWorld&lt;/u&gt;</code></p><p>显示：<u>HelloWorld</u></p><h2 id="3-分割线："><a href="#3-分割线：" class="headerlink" title="3.分割线："></a>3.分割线：</h2><p>用法：<code>---</code>  <em>//需要单独的一行！</em></p><p>例如：<code>---</code></p><p>显示：</p><hr><h2 id="4-标题："><a href="#4-标题：" class="headerlink" title="4.标题："></a>4.标题：</h2><p>用法：<code># 标题内容</code> // 需要单独一行</p><p><em>如果需要标题下面的小标题可以多加一个“#”符号</em></p><p>例如：<code># 显示效果</code></p><p>显示：</p><h1 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h1><h2 id="5-加粗："><a href="#5-加粗：" class="headerlink" title="5.加粗："></a>5.加粗：</h2><p>用法：<code>**加粗内容**</code></p><p>例如：<code>**HelloWorld**</code></p><p>显示：<strong>HelloWorld</strong></p><h2 id="6-斜体："><a href="#6-斜体：" class="headerlink" title="6.斜体："></a>6.斜体：</h2><p>用法：<code>*斜体内容*</code></p><p>例如：<code>*HelloWorld*</code></p><p>显示：<em>HelloWorld</em></p><h2 id="7-既斜体又加粗："><a href="#7-既斜体又加粗：" class="headerlink" title="7.既斜体又加粗："></a>7.既斜体又加粗：</h2><p>用法：<code>***斜体又加粗内容***</code></p><p>例如：<code>***HelloWorld***</code></p><p>显示：<em><strong>HelloWorld</strong></em></p><h2 id="8-无序列表："><a href="#8-无序列表：" class="headerlink" title="8.无序列表："></a>8.无序列表：</h2><p>用法：<code>- 内容</code> // 需要单独一行</p><p>例如：</p><p><code>- HelloWorld</code></p><p><code>- HelloMarkdown</code></p><p>显示：</p><ul><li><p>HelloWorld</p></li><li><p>HelloMarkdown</p></li></ul><h2 id="9-有序列表："><a href="#9-有序列表：" class="headerlink" title="9.有序列表："></a>9.有序列表：</h2><p>用法：</p><p><code>1. 内容</code></p><p><code>2. 内容</code></p><p><code>3. 内容</code></p><p>// 可以不按数字顺序，但必须从1开始</p><p>例如：</p><p><code>1. HelloWorld</code></p><p><code>2. HelloMarkdown</code></p><p><code>3. Markdown yes</code></p><p>显示：</p><ol><li><p>HelloWorld</p></li><li><p>HelloMarkdown</p></li><li><p>Markdown yes</p></li></ol><h2 id="10-引用内容："><a href="#10-引用内容：" class="headerlink" title="10.引用内容："></a>10.引用内容：</h2><h2 id="单行："><a href="#单行：" class="headerlink" title="单行："></a>单行：</h2><p>用法：<code>&gt; 引用内容</code> //  需要单独一行</p><p>例如：<code>&gt; HelloWorld by Markdown</code></p><p>显示：</p><blockquote><p>HelloWorld by Markdown</p></blockquote><h2 id="空行："><a href="#空行：" class="headerlink" title="空行："></a>空行：</h2><p>用法：</p><p><code>&gt; 第一行</code></p><p><code>&gt;</code></p><p><code>&gt; 第二行</code></p><p>例如：</p><p><code>&gt; HelloWorld by Markdown 1</code></p><p><code>&gt;</code></p><p><code>&gt; HelloWorld by Markdown 2</code></p><p>显示：</p><blockquote><p>HelloWorld by Markdown 1</p><p>HelloWorld by Markdown 2</p></blockquote><h2 id="嵌套："><a href="#嵌套：" class="headerlink" title="嵌套："></a>嵌套：</h2><p>用法：</p><p><code>&gt; 第一行</code></p><p><code>&gt; 第二行</code></p><p><code>&gt; &gt; 第二行引用的（需要嵌套的）</code></p><p>例如：</p><p><code>&gt; HelloWorld by Markdown 1</code></p><p><code>&gt; HelloWorld by Markdown 2</code></p><p><code>&gt; &gt; HelloWorld by Markdown 3</code></p><p>显示：</p><blockquote><p>HelloWorld by Markdown 1</p><p>HelloWorld by Markdown 2</p><blockquote><p>HelloWorld by Markdown 3</p></blockquote></blockquote><h2 id="带有其他语法的引用："><a href="#带有其他语法的引用：" class="headerlink" title="带有其他语法的引用："></a>带有其他语法的引用：</h2><p><code>&gt; ### HelloWorld</code></p><p><code>&gt;</code></p><p><code>&gt; - HelloWorld</code></p><p><code>&gt; - HelloMarkdown</code></p><p><code>&gt; - Markdown yes</code></p><p><code>&gt;</code></p><p><code>&gt; *Hello* **World**</code></p><p>显示：</p><blockquote><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><ul><li>HelloMarkdown</li><li>Markdown  yes</li></ul><p><em>Hello</em> <strong>World</strong></p></blockquote><h2 id="11-代码块："><a href="#11-代码块：" class="headerlink" title="11.代码块："></a>11.代码块：</h2><p>用法：三个```符号（要封口） （可以缩减成一个）</p><p>例如：```HelloWorld （要封口）</p><p>显示：<code>HelloWorld</code></p><h2 id="12-转义字符："><a href="#12-转义字符：" class="headerlink" title="12.转义字符："></a>12.转义字符：</h2><p>可以把本来要用来Markdown语法的字符转成正常字符</p><p>用法：<code>\</code></p><p>例如：<code>\*HelloWorld\*</code></p><p>显示：*HelloWorld*</p><h2 id="13-使用HTML标签："><a href="#13-使用HTML标签：" class="headerlink" title="13.使用HTML标签："></a>13.使用HTML标签：</h2><p>用法：直接写HTML标签</p><p>例如：<code>&lt;u&gt;HelloWorld&lt;/u&gt;</code></p><p>显示：<u>HelloWorld</u></p><p><em>（之前的下划线就是用的HTML标签，而不是Markdown语法）</em></p><h2 id="14-表格："><a href="#14-表格：" class="headerlink" title="14.表格："></a>14.表格：</h2><h2 id="正常"><a href="#正常" class="headerlink" title="正常"></a>正常</h2><p>用法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 标题1   | 标题2 |</span><br><span class="line">| -------|------ |</span><br><span class="line">| 内容1   | 内容3 |</span><br><span class="line">| 内容2   | 内容4 |</span><br></pre></td></tr></tbody></table></figure><p>（“|”是分割，”—“是竖着的分割线加粗）</p><p>例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></tbody></table></figure><p>显示：</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><h2 id="自动对齐"><a href="#自动对齐" class="headerlink" title="自动对齐"></a>自动对齐</h2><p>用法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 标题1      | 标题2 | 标题3     |</span><br><span class="line">| :---:        |    :----:   |          :---: |</span><br><span class="line">| 内容1      | 内容3     | 内容5   |</span><br><span class="line">| 内容2   | 内容4        |内容6      |</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="center">标题1</th><th align="center">标题2</th><th align="center">标题3</th></tr></thead><tbody><tr><td align="center">内容1</td><td align="center">内容3</td><td align="center">内容5</td></tr><tr><td align="center">内容2</td><td align="center">内容4</td><td align="center">内容6</td></tr></tbody></table><h2 id="15-任务完成表"><a href="#15-任务完成表" class="headerlink" title="15.任务完成表"></a>15.任务完成表</h2><p>用法：</p><p><code>- [x] 打钩的内容</code></p><p><code>- [] 不打钩的内容</code></p><p>例如：</p><p><code>- [x] Markdown yes</code></p><p><code>- [] Word Yes</code></p><p>显示</p><ul><li><p><input checked="" disabled="" type="checkbox"> Markdown yes</p></li><li><p><input disabled="" type="checkbox"> Word Yes</p></li></ul><p>更多请看<a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/markdown-basics">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/markdown-basics</a><br>以及<a href="https://markdown.com.cn/basic-syntax/images.html">https://markdown.com.cn/basic-syntax/images.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery主题的Front-matter</title>
      <link href="/2023/01/05/matery%E4%B8%BB%E9%A2%98%E7%9A%84Front-matter/"/>
      <url>/2023/01/05/matery%E4%B8%BB%E9%A2%98%E7%9A%84Front-matter/</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">赵奇</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Typora</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Markdown</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p><strong>摘自matery的README_CN，方便自己使用</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ayanami的第一篇blog</title>
      <link href="/2022/03/20/%E7%BB%AB%E6%B3%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2022/03/20/%E7%BB%AB%E6%B3%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="使用笔记"><a href="#使用笔记" class="headerlink" title="使用笔记"></a>使用笔记</h2><p>node -v#查看node版本<br>npm -v#查看npm版本<br>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a>#安装淘宝的cnpm 管理器<br>cnpm -v#查看cnpm版本<br>cnpm install -g hexo-cli    #安装hexo框架<br>hexo -v#查看hexo版本<br>mkdir blog#创建blog目录<br>cd blog #进入blog目录<br>sudo hexo init #生成博客 初始化博客<br>hexo s#启动本地博客服务<br><a href="http://localhost:4000/">http://localhost:4000/</a>#本地访问地址<br>hexo n “我的第一篇文章” #创建新的文章<br>#返回blog目录<br>hexo clean #清理<br>hexo g #生成<br>#Github创建一个新的仓库 YourGithubName.github.io<br>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</p><p>#配置_config.yml<br>    # Deployment<br>    ## Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a><br>    deploy:<br>          type: git<br>         repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>          branch: master<br>hexo d#部署到Github仓库里<br><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  #访问这个地址可以查看博客</p><p> git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia  #下载yilia主题到本地</p><p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p><p>hexo c#清理一下<br>hexo g#生成<br>hexo d#部署到远程Github仓库</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/20/hello-world/"/>
      <url>/2022/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
